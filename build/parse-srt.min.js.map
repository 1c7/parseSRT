{"version":3,"sources":["parse-srt.js"],"names":["global","factory","exports","module","define","amd","parseSRT","this","toMilliseconds","time","t","split","s","length","parseFloat","e","nextNonEmptyLine","linesArray","position","idx","lastNonEmptyLine","data","arguments","undefined","subs","lines","endIdx","text","sub","i","id","parseInt","start","indexOf","substr","end","push","join","replace"],"mappings":"CAAC,SAAUA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,IAC9D,kBAAXG,SAAyBA,OAAOC,IAAMD,OAAOH,GACnDD,EAAOM,SAAWL,KACnBM,KAAM,WAAe;;;;;;;;AAWvB,QAASC,GAAeC,GACtB,GAAIC,GAAID,EAAKE,MAAM,IAEnB,KACE,GAAIC,GAAIF,EAAE,GAAGC,MAAM,IAMnB,OAJiB,KAAbC,EAAEC,SACJD,EAAIF,EAAE,GAAGC,MAAM,MAGa,KAAvBG,WAAWJ,EAAE,GAAI,IAAuC,IAAvBI,WAAWJ,EAAE,GAAI,IAAqC,IAAvBI,WAAWF,EAAE,GAAI,IAAaE,WAAWF,EAAE,GAAI,IACtH,MAAOG,GACP,MAAO,IAIX,QAASC,GAAiBC,EAAYC,GAGpC,IAFA,GAAIC,GAAMD,GAEFD,EAAWE,IACjBA,GAGF,OAAOA,GAGT,QAASC,GAAiBH,GAGxB,IAFA,GAAIE,GAAMF,EAAWJ,OAAS,EAEvBM,GAAO,IAAMF,EAAWE,IAC7BA,GAGF,OAAOA,GAGT,QAASb,KAWP,IAAK,GAVDe,GAAOC,UAAUT,OAAS,GAAsBU,SAAjBD,UAAU,GAAmBA,UAAU,GAAK,GAE3EE,KACAC,EAAQJ,EAAKV,MAAM,oBACnBe,EAASN,EAAiBK,GAAS,EACnCN,EAAM,EACNV,EAAO,OACPkB,EAAO,OACPC,EAAM,OAEDC,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAiB/B,IAhBAD,KACAD,KAEAE,EAAIb,EAAiBS,EAAOI,GAC5BD,EAAIE,GAAKC,SAASN,EAAMI,KAAM,IAE9BpB,EAAOgB,EAAMI,KAAKlB,MAAM,mBAExBiB,EAAII,MAAQxB,EAAeC,EAAK,IAEhCU,EAAMV,EAAK,GAAGwB,QAAQ,KAClBd,KAAQ,IACVV,EAAK,GAAKA,EAAK,GAAGyB,OAAO,EAAGf,IAE9BS,EAAIO,IAAM3B,EAAeC,EAAK,IAEvBoB,EAAIH,GAAUD,EAAMI,IACzBF,EAAKS,KAAKX,EAAMI,KAGlBD,GAAID,KAAOA,EAAKU,KAAK,OAAOC,QAAQ,qCAAsC,IAE1EV,EAAID,KAAOC,EAAID,KAAKW,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAExDV,EAAID,KAAOC,EAAID,KAAKW,QAAQ,uGAAwG,YACpIV,EAAID,KAAOC,EAAID,KAAKW,QAAQ,QAAS,UAErCd,EAAKY,KAAKR,GAGZ,MAAOJ,GAGT,MAAOlB","file":"parse-srt.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.parseSRT = factory());\n}(this, (function () { 'use strict';\n\n/**\n * @name parseSRT\n * @desc Parses and converts SRT subtitle data into JSON format. Adapted from the popcorn.js SRT parser plugin.\n * @see http://popcornjs.org/\n * @author Luis Rodrigues (http://www.luisrodriguesweb.com)\n * @version 0.1.0-alpha\n * @license MIT\n */\n\nfunction toMilliseconds(time) {\n  var t = time.split(':');\n\n  try {\n    var s = t[2].split(',');\n\n    if (s.length === 1) {\n      s = t[2].split('.');\n    }\n\n    return parseFloat(t[0], 10) * 3600000 + parseFloat(t[1], 10) * 60000 + parseFloat(s[0], 10) * 1000 + parseFloat(s[1], 10);\n  } catch (e) {\n    return 0;\n  }\n}\n\nfunction nextNonEmptyLine(linesArray, position) {\n  var idx = position;\n\n  while (!linesArray[idx]) {\n    idx++;\n  }\n\n  return idx;\n}\n\nfunction lastNonEmptyLine(linesArray) {\n  var idx = linesArray.length - 1;\n\n  while (idx >= 0 && !linesArray[idx]) {\n    idx--;\n  }\n\n  return idx;\n}\n\nfunction parseSRT() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  var subs = [];\n  var lines = data.split(/(?:\\r\\n|\\r|\\n)/gm);\n  var endIdx = lastNonEmptyLine(lines) + 1;\n  var idx = 0;\n  var time = void 0;\n  var text = void 0;\n  var sub = void 0;\n\n  for (var i = 0; i < endIdx; i++) {\n    sub = {};\n    text = [];\n\n    i = nextNonEmptyLine(lines, i);\n    sub.id = parseInt(lines[i++], 10);\n\n    time = lines[i++].split(/[\\t ]*-->[\\t ]*/);\n\n    sub.start = toMilliseconds(time[0]);\n\n    idx = time[1].indexOf(' ');\n    if (idx !== -1) {\n      time[1] = time[1].substr(0, idx);\n    }\n    sub.end = toMilliseconds(time[1]);\n\n    while (i < endIdx && lines[i]) {\n      text.push(lines[i++]);\n    }\n\n    sub.text = text.join('\\\\N').replace(/\\{(\\\\[\\w]+\\(?([\\w\\d]+,?)+\\)?)+\\}/gi, '');\n\n    sub.text = sub.text.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n\n    sub.text = sub.text.replace(/&lt;(\\/?(font|b|u|i|s))((\\s+(\\w|\\w[\\w\\-]*\\w)(\\s*=\\s*(?:\".*?\"|'.*?'|[^'\">\\s]+))?)+\\s*|\\s*)(\\/?)&gt;/gi, '<$1$3$7>');\n    sub.text = sub.text.replace(/\\\\N/gi, '<br />');\n\n    subs.push(sub);\n  }\n\n  return subs;\n}\n\nreturn parseSRT;\n\n})));\n//# sourceMappingURL=parse-srt.js.map\n"]}